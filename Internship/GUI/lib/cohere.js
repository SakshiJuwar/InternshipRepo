/*import { CohereClient } from "cohere-ai";

const cohere = new CohereClient({
  token: process.env.COHERE_API_KEY,
});

export const getCohereEmbedding = async (text) => {
  const response = await cohere.embed({
    texts: [text],
    model: "embed-english-v3.0",
    input_type: "search_document",
  });

  return response.embeddings[0];
};
*/
/*
import { CohereClient } from 'cohere-ai';

const cohere = new CohereClient({
  token: process.env.COHERE_API_KEY,
});

/**
 * Returns a single embedding for the given text using Cohere's embed-english-v3.0 model.
 * @param {string} text - The input text to embed
 * @returns {Promise<number[]>} - The embedding as an array of numbers
 *//*
export const getCohereEmbedding = async (text) => {
 if (!text) throw new Error('Text is required for embedding');

 try {
   const response = await cohere.embed({
     texts: [text],
     model: 'embed-english-v3.0',
     input_type: 'search_document', // or 'search_query' depending on use case
   });

   return response.embeddings[0];
 } catch (err) {
   console.error('Error generating Cohere embedding:', err);
   throw new Error('Failed to get Cohere embedding');
 }
};
*/

import { CohereClient } from 'cohere-ai';

const cohere = new CohereClient({
  token: process.env.COHERE_API_KEY,
});

/**
 * Generates a single embedding for a given text using Cohere's embed-english-v3.0 model.
 * @param {string} text - The input text to embed.
 * @returns {Promise<number[]>} - The embedding as an array of numbers.
 */
export const getCohereEmbedding = async (text) => {
  if (!text) throw new Error('Text is required for embedding');

  try {
    const response = await cohere.embed({
      texts: [text],
      model: 'embed-english-v3.0',
      input_type: 'search_document', // or 'search_query' for questions
    });

    return response.embeddings[0];
  } catch (err) {
    console.error('Error generating Cohere embedding:', err);
    throw new Error('Failed to get Cohere embedding');
  }
};

/**
 * Generates a response from Cohere Command R+ model using question + document context (RAG).
 * @param {string} question - User's question.
 * @param {string[]} contextChunks - Array of text chunks from Pinecone.
 * @returns {Promise<string>} - The answer generated by Command R+.
 */
export const getCohereAnswer = async (question, contextChunks) => {
  if (!question || contextChunks.length === 0) {
    throw new Error('Question and context chunks are required');
  }

  try {
    const response = await cohere.chat({
      model: 'command-r-plus',
      message: question,
      //documents: contextChunks.map((text, i) => ({
      //id: `doc-${i + 1}`,
      // text,
      documents: contextChunks
        .filter(text => text && text.trim().length > 0) // âœ… filter out empty/whitespace strings
        .map((text, i) => ({
          id: `doc-${i + 1}`,
          text,
        })),


      temperature: 0.3,
      promptTruncation: 'AUTO',
    });

    return response.text;
  } catch (err) {
    console.error('Error generating answer from Command R+:', err);
    throw new Error('Failed to get answer from Cohere');
  }
};
